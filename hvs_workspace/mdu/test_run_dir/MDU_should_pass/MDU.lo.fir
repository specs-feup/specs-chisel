circuit MDU :
  module MDU :
    input clock : Clock
    input reset : UInt<1>
    input io_A : UInt<32>
    input io_B : UInt<32>
    input io_fn : UInt<3>
    input io_en : UInt<1>
    output io_out : UInt<32>
    output io_sys_stall : UInt<1>

    reg storeReg_A : UInt<32>, clock with :
      reset => (UInt<1>("h0"), storeReg_A) @[mdu.scala 36:27]
    reg storeReg_B : UInt<32>, clock with :
      reset => (UInt<1>("h0"), storeReg_B) @[mdu.scala 37:27]
    reg storeReg64 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), storeReg64) @[mdu.scala 38:27]
    reg stateReg : UInt<2>, clock with :
      reset => (UInt<1>("h0"), stateReg) @[mdu.scala 39:25]
    reg remainder : UInt<32>, clock with :
      reset => (UInt<1>("h0"), remainder) @[mdu.scala 40:26]
    reg divisor : UInt<32>, clock with :
      reset => (UInt<1>("h0"), divisor) @[mdu.scala 41:24]
    reg coefficient : UInt<32>, clock with :
      reset => (UInt<1>("h0"), coefficient) @[mdu.scala 42:28]
    reg result : UInt<32>, clock with :
      reset => (UInt<1>("h0"), result) @[mdu.scala 43:23]
    node _is_mult_T = eq(io_fn, UInt<3>("h0")) @[mdu.scala 45:21]
    node _is_mult_T_1 = eq(io_fn, UInt<3>("h1")) @[mdu.scala 45:42]
    node _is_mult_T_2 = or(_is_mult_T, _is_mult_T_1) @[mdu.scala 45:33]
    node _is_mult_T_3 = eq(io_fn, UInt<3>("h2")) @[mdu.scala 45:64]
    node _is_mult_T_4 = or(_is_mult_T_2, _is_mult_T_3) @[mdu.scala 45:55]
    node _is_mult_T_5 = eq(io_fn, UInt<3>("h3")) @[mdu.scala 45:88]
    node _is_mult_T_6 = or(_is_mult_T_4, _is_mult_T_5) @[mdu.scala 45:79]
    node _io_sys_stall_T = eq(stateReg, UInt<2>("h0")) @[mdu.scala 46:30]
    node _io_sys_stall_T_1 = not(_io_sys_stall_T) @[mdu.scala 46:19]
    node _T = eq(UInt<2>("h0"), stateReg) @[mdu.scala 49:19]
    node _remainder_T = eq(io_fn, UInt<3>("h4")) @[mdu.scala 54:33]
    node _remainder_T_1 = eq(io_fn, UInt<3>("h6")) @[mdu.scala 54:54]
    node _remainder_T_2 = or(_remainder_T, _remainder_T_1) @[mdu.scala 54:45]
    node _remainder_T_3 = bits(io_A, 31, 31) @[mdu.scala 54:74]
    node _remainder_T_4 = eq(_remainder_T_3, UInt<1>("h1")) @[mdu.scala 54:79]
    node _remainder_T_5 = and(_remainder_T_2, _remainder_T_4) @[mdu.scala 54:67]
    node _remainder_T_6 = not(io_A) @[mdu.scala 54:88]
    node _remainder_T_7 = add(_remainder_T_6, UInt<1>("h1")) @[mdu.scala 54:96]
    node _remainder_T_8 = tail(_remainder_T_7, 1) @[mdu.scala 54:96]
    node _remainder_T_9 = mux(_remainder_T_5, _remainder_T_8, io_A) @[mdu.scala 54:25]
    node _divisor_T = eq(io_fn, UInt<3>("h4")) @[mdu.scala 55:31]
    node _divisor_T_1 = eq(io_fn, UInt<3>("h6")) @[mdu.scala 55:52]
    node _divisor_T_2 = or(_divisor_T, _divisor_T_1) @[mdu.scala 55:43]
    node _divisor_T_3 = bits(io_B, 31, 31) @[mdu.scala 55:72]
    node _divisor_T_4 = eq(_divisor_T_3, UInt<1>("h1")) @[mdu.scala 55:77]
    node _divisor_T_5 = and(_divisor_T_2, _divisor_T_4) @[mdu.scala 55:65]
    node _divisor_T_6 = not(io_B) @[mdu.scala 55:86]
    node _divisor_T_7 = add(_divisor_T_6, UInt<1>("h1")) @[mdu.scala 55:94]
    node _divisor_T_8 = tail(_divisor_T_7, 1) @[mdu.scala 55:94]
    node _divisor_T_9 = mux(_divisor_T_5, _divisor_T_8, io_B) @[mdu.scala 55:23]
    node is_mult = _is_mult_T_6 @[mdu.scala 35:21 45:11]
    node _stateReg_T = mux(is_mult, UInt<2>("h1"), UInt<2>("h2")) @[mdu.scala 56:24]
    node _GEN_0 = mux(io_en, io_A, storeReg_A) @[mdu.scala 51:18 52:20 36:27]
    node _GEN_1 = mux(io_en, io_B, storeReg_B) @[mdu.scala 51:18 53:20 37:27]
    node _GEN_2 = mux(io_en, _remainder_T_9, remainder) @[mdu.scala 51:18 54:19 40:26]
    node _GEN_3 = mux(io_en, _divisor_T_9, divisor) @[mdu.scala 51:18 55:17 41:24]
    node _GEN_4 = mux(io_en, _stateReg_T, stateReg) @[mdu.scala 51:18 56:18 39:25]
    node _T_1 = eq(UInt<2>("h1"), stateReg) @[mdu.scala 49:19]
    node _storeReg64_T = mul(storeReg_A, storeReg_B) @[mdu.scala 60:34]
    node _result_T = eq(io_fn, UInt<3>("h0")) @[mdu.scala 61:29]
    node _result_T_1 = bits(storeReg64, 31, 0) @[mdu.scala 61:52]
    node _result_T_2 = bits(io_A, 31, 31) @[mdu.scala 61:71]
    node _result_T_3 = bits(io_B, 31, 31) @[mdu.scala 61:86]
    node _result_T_4 = neq(_result_T_2, _result_T_3) @[mdu.scala 61:76]
    node _result_T_5 = bits(storeReg64, 62, 32) @[mdu.scala 61:112]
    node _result_T_6 = cat(UInt<1>("h1"), _result_T_5) @[Cat.scala 31:58]
    node _result_T_7 = bits(storeReg64, 63, 32) @[mdu.scala 61:134]
    node _result_T_8 = mux(_result_T_4, _result_T_6, _result_T_7) @[mdu.scala 61:64]
    node _result_T_9 = mux(_result_T, _result_T_1, _result_T_8) @[mdu.scala 61:22]
    node _T_2 = eq(UInt<2>("h2"), stateReg) @[mdu.scala 49:19]
    node _T_3 = geq(remainder, divisor) @[mdu.scala 65:22]
    node _remainder_T_10 = sub(remainder, divisor) @[mdu.scala 66:32]
    node _remainder_T_11 = tail(_remainder_T_10, 1) @[mdu.scala 66:32]
    node _coefficient_T = add(coefficient, UInt<1>("h1")) @[mdu.scala 67:36]
    node _coefficient_T_1 = tail(_coefficient_T, 1) @[mdu.scala 67:36]
    node _result_T_10 = eq(io_fn, UInt<3>("h6")) @[mdu.scala 69:29]
    node _result_T_11 = eq(io_fn, UInt<3>("h7")) @[mdu.scala 69:50]
    node _result_T_12 = or(_result_T_10, _result_T_11) @[mdu.scala 69:41]
    node _result_T_13 = eq(io_fn, UInt<3>("h6")) @[mdu.scala 69:74]
    node _result_T_14 = bits(io_A, 31, 31) @[mdu.scala 69:97]
    node _result_T_15 = eq(_result_T_14, UInt<1>("h1")) @[mdu.scala 69:102]
    node _result_T_16 = not(remainder) @[mdu.scala 69:111]
    node _result_T_17 = add(_result_T_16, UInt<1>("h1")) @[mdu.scala 69:122]
    node _result_T_18 = tail(_result_T_17, 1) @[mdu.scala 69:122]
    node _result_T_19 = mux(_result_T_15, _result_T_18, remainder) @[mdu.scala 69:90]
    node _result_T_20 = mux(_result_T_13, _result_T_19, remainder) @[mdu.scala 69:67]
    node _result_T_21 = eq(io_fn, UInt<3>("h4")) @[mdu.scala 70:21]
    node _result_T_22 = bits(io_A, 31, 31) @[mdu.scala 70:44]
    node _result_T_23 = bits(io_B, 31, 31) @[mdu.scala 70:59]
    node _result_T_24 = neq(_result_T_22, _result_T_23) @[mdu.scala 70:49]
    node _result_T_25 = not(coefficient) @[mdu.scala 70:66]
    node _result_T_26 = add(_result_T_25, UInt<1>("h1")) @[mdu.scala 70:79]
    node _result_T_27 = tail(_result_T_26, 1) @[mdu.scala 70:79]
    node _result_T_28 = mux(_result_T_24, _result_T_27, coefficient) @[mdu.scala 70:37]
    node _result_T_29 = mux(_result_T_21, _result_T_28, coefficient) @[mdu.scala 70:14]
    node _result_T_30 = mux(_result_T_12, _result_T_20, _result_T_29) @[mdu.scala 69:22]
    node _GEN_5 = mux(_T_3, _remainder_T_11, remainder) @[mdu.scala 65:33 66:19 40:26]
    node _GEN_6 = mux(_T_3, _coefficient_T_1, coefficient) @[mdu.scala 65:33 67:21 42:28]
    node _GEN_7 = mux(_T_3, result, _result_T_30) @[mdu.scala 43:23 65:33 69:16]
    node _GEN_8 = mux(_T_3, stateReg, UInt<2>("h0")) @[mdu.scala 39:25 65:33 71:18]
    node _GEN_9 = mux(_T_2, _GEN_5, remainder) @[mdu.scala 49:19 40:26]
    node _GEN_10 = mux(_T_2, _GEN_6, coefficient) @[mdu.scala 49:19 42:28]
    node _GEN_11 = mux(_T_2, _GEN_7, result) @[mdu.scala 49:19 43:23]
    node _GEN_12 = mux(_T_2, _GEN_8, stateReg) @[mdu.scala 49:19 39:25]
    node _GEN_13 = mux(_T_1, _storeReg64_T, storeReg64) @[mdu.scala 49:19 60:20 38:27]
    node _GEN_14 = mux(_T_1, _result_T_9, _GEN_11) @[mdu.scala 49:19 61:16]
    node _GEN_15 = mux(_T_1, UInt<2>("h0"), _GEN_12) @[mdu.scala 49:19 62:18]
    node _GEN_16 = mux(_T_1, remainder, _GEN_9) @[mdu.scala 49:19 40:26]
    node _GEN_17 = mux(_T_1, coefficient, _GEN_10) @[mdu.scala 49:19 42:28]
    node _GEN_18 = mux(_T, _GEN_0, storeReg_A) @[mdu.scala 49:19 36:27]
    node _GEN_19 = mux(_T, _GEN_1, storeReg_B) @[mdu.scala 49:19 37:27]
    node _GEN_20 = mux(_T, _GEN_2, _GEN_16) @[mdu.scala 49:19]
    node _GEN_21 = mux(_T, _GEN_3, divisor) @[mdu.scala 49:19 41:24]
    node _GEN_22 = mux(_T, _GEN_4, _GEN_15) @[mdu.scala 49:19]
    node _GEN_23 = mux(_T, storeReg64, _GEN_13) @[mdu.scala 49:19 38:27]
    node _GEN_24 = mux(_T, result, _GEN_14) @[mdu.scala 49:19 43:23]
    node _GEN_25 = mux(_T, coefficient, _GEN_17) @[mdu.scala 49:19 42:28]
    io_out <= result @[mdu.scala 47:10]
    io_sys_stall <= _io_sys_stall_T_1 @[mdu.scala 46:16]
    storeReg_A <= mux(reset, UInt<32>("h0"), _GEN_18) @[mdu.scala 36:{27,27}]
    storeReg_B <= mux(reset, UInt<32>("h0"), _GEN_19) @[mdu.scala 37:{27,27}]
    storeReg64 <= mux(reset, UInt<64>("h0"), _GEN_23) @[mdu.scala 38:{27,27}]
    stateReg <= mux(reset, UInt<2>("h0"), _GEN_22) @[mdu.scala 39:{25,25}]
    remainder <= mux(reset, UInt<32>("h0"), _GEN_20) @[mdu.scala 40:{26,26}]
    divisor <= mux(reset, UInt<32>("h0"), _GEN_21) @[mdu.scala 41:{24,24}]
    coefficient <= mux(reset, UInt<32>("h0"), _GEN_25) @[mdu.scala 42:{28,28}]
    result <= mux(reset, UInt<32>("h0"), _GEN_24) @[mdu.scala 43:{23,23}]
